{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ac071303-5225-4f7d-9db2-e88372c88731",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "2+3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a11eff93-a370-48fd-a0bd-44906158ec24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "before swapping 1 2\n",
      "after swapping 2 1\n"
     ]
    }
   ],
   "source": [
    "a= 1\n",
    "b= 2\n",
    "print(\"before swapping\",a,b)\n",
    "a,b=b,a\n",
    "print(\"after swapping\",a,b)\n",
    "\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8b22c86c-24eb-4a29-ad27-1811010cfbe9",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax. Perhaps you forgot a comma? (3073265466.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[5], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    a=int(input(\"enter the value of a: \")\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"enter the value of a: \")\n",
    "b=int(input(\"enter the value of b: \")\n",
    "print(\"before swap\",a,b)\n",
    "temp=a\n",
    "a=b\n",
    "b=temp\n",
    "print(\"after swap\",a,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "40e8a730-9766-4b2b-9482-6b6c649ff654",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the value of a:  6\n",
      "enter the value of b:  7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "before swap 6 7\n",
      "after swap 7 6\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"enter the value of a: \"))\n",
    "b=int(input(\"enter the value of b: \"))\n",
    "print(\"before swap\",a,b)\n",
    "temp=a\n",
    "a=b\n",
    "b=temp\n",
    "print(\"after swap\",a,b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "36467fe0-3464-48d9-b6d1-8c8dbcbe8a9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the value of a:  45\n",
      "enter the value of b:  78\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "before swapping a=  45 b=  78\n",
      "after swapping a=  78 b=  45\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"enter the value of a: \"))\n",
    "b=int(input(\"enter the value of b: \"))\n",
    "print(\"before swapping a= \", a,\"b= \",b)\n",
    "a= a+b\n",
    "b= a-b\n",
    "a= a-b\n",
    "print(\"after swapping a= \", a,\"b= \",b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4dd99d7d-66d4-4928-b2b3-ea4e3ec6ff92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the value of a:  34\n",
      "enter the value of b:  54\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "before swapping a=  34 b=  54\n",
      "after swapping a=  54 b=  2\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"enter the value of a: \"))\n",
    "b=int(input(\"enter the value of b: \"))\n",
    "print(\"before swapping a= \", a,\"b= \",b)\n",
    "a= a+b\n",
    "b= a/b\n",
    "a= a/b\n",
    "print(\"after swapping a= \",round(a),\"b= \",round(b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ae39a4a5-fbdd-4204-acca-a99c9de3ec21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the value of a:  25\n",
      "enter the value of b:  45\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "before swapping a=  25 b=  45\n",
      "after swapping a=  45 b=  25\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"enter the value of a: \"))\n",
    "b=int(input(\"enter the value of b: \"))\n",
    "print(\"before swapping a= \", a,\"b= \",b)\n",
    "a= a^b\n",
    "b= a^b\n",
    "a= a^b\n",
    "print(\"after swapping a= \",round(a),\"b= \",round(b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bac25685-2acf-40fe-9d30-23bea318ae0c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3e4457a7-caee-4852-ad00-ab512be564a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the radius : 7.5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "area:  176.7144375\n",
      "circumference: 47.12385\n"
     ]
    }
   ],
   "source": [
    "pi=3.14159\n",
    "r= float(input(\"enter the radius :\"))\n",
    "a= pi * (r**2)\n",
    "c= 2 * pi * r\n",
    "print(\"area: \", a)\n",
    "print(\"circumference:\", c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dd88255d-a838-4348-a5f5-e62a0e229911",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the radius : 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "area:  50.26548245743669\n",
      "circumference: 25.132741228718345\n"
     ]
    }
   ],
   "source": [
    "from  math import pi\n",
    "r= float(input(\"enter the radius :\"))\n",
    "a= pi * (r**2)\n",
    "c= 2 * pi * r\n",
    "print(\"area: \", a)\n",
    "print(\"circumference:\", c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c2fc6f33-2282-40df-99d1-c1262ced92ea",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unmatched ')' (3007814850.py, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[19], line 5\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(\"tan:\" tan(radiausangle)))\u001b[0m\n\u001b[1;37m                                   ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unmatched ')'\n"
     ]
    }
   ],
   "source": [
    "from math import sin,cos,tan,radians\n",
    "angle =30\n",
    "print(\"sin:\" sin(radians(angle)))\n",
    "print(\"cos:\" cos(radias(angle)))\n",
    "print(\"tan:\" tan(radiausangle)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c6937c5e-4576-4ec9-869f-00231d615a31",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unmatched ')' (3776557099.py, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[21], line 4\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(\"tan:\" , tan(radiausangle)))\u001b[0m\n\u001b[1;37m                                     ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unmatched ')'\n"
     ]
    }
   ],
   "source": [
    "angle =30\n",
    "print(\"sin:\" , sin(radians(angle)))\n",
    "print(\"cos:\" , cos(radias(angle)))\n",
    "print(\"tan:\" , tan(radiausangle)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7cd9cbe1-cd20-4554-bd70-8e1a6d97971d",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unmatched ')' (793270686.py, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[23], line 5\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(\"tan:\", tan(radiausangle)))\u001b[0m\n\u001b[1;37m                                    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unmatched ')'\n"
     ]
    }
   ],
   "source": [
    "from math import sin,cos,tan,radians\n",
    "angle =30\n",
    "print(\"sin:\", sin(radians(angle)))\n",
    "print(\"cos:\",cos(radias(angle)))\n",
    "print(\"tan:\", tan(radiausangle)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b708fb68-2af7-4768-b146-82d6bdecf767",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sin: 0.49999999999999994\n",
      "cos: 0.8660254037844387\n",
      "tan: 0.5773502691896257\n"
     ]
    }
   ],
   "source": [
    "from math import sin,cos,tan,radians\n",
    "angle =30\n",
    "print(\"sin:\", sin(radians(angle)))\n",
    "print(\"cos:\",cos(radians(angle)))\n",
    "print(\"tan:\", tan(radians(angle)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c5d90f56-b56f-4cd4-bf2d-3d35c8da8ede",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax. Perhaps you forgot a comma? (1695349027.py, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[27], line 4\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(\"ceil:\" ceil(num))\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"
     ]
    }
   ],
   "source": [
    "from math import floor , ceil\n",
    "num=7.6\n",
    "print(\"floor:\", floor(num))\n",
    "print(\"ceil:\" ceil(num))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "82f06276-373b-4089-9cef-77942e1d95dd",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax. Perhaps you forgot a comma? (375335653.py, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[29], line 4\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(\"ceil:\" ceil(num))\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax. Perhaps you forgot a comma?\n"
     ]
    }
   ],
   "source": [
    "from math import floor , ceil\n",
    "num=7.9\n",
    "print(\"floor:\", floor(num))\n",
    "print(\"ceil:\" ceil(num))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "73c80dae-07c9-4f98-b62a-9653ef2d1d2b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "floor: 7\n",
      "ceil: 8\n"
     ]
    }
   ],
   "source": [
    "from math import floor , ceil\n",
    "num=7.9\n",
    "print(\"floor:\", floor(num))\n",
    "print(\"ceil:\" ,ceil(num))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "5c4d466e-2b3f-4b95-b0ea-b6c4d37e11e3",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'match'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[33], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmatch\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m log10,exp\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnatural log:\u001b[39m\u001b[38;5;124m\"\u001b[39m,log(e))\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlog base 10 of 100:\u001b[39m\u001b[38;5;124m\"\u001b[39m,log10(\u001b[38;5;241m100\u001b[39m))\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'match'"
     ]
    }
   ],
   "source": [
    "from match import log10,exp\n",
    "print(\"natural log:\",log(e))\n",
    "print(\"log base 10 of 100:\",log10(100))\n",
    "print(\"e to the power 2:\",exp(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "51801f19-b316-436d-b043-6ed17e471aa8",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'match'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[35], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmatch\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m log, log10,exp\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnatural log:\u001b[39m\u001b[38;5;124m\"\u001b[39m,log(e))\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlog base 10 of 100:\u001b[39m\u001b[38;5;124m\"\u001b[39m,log10(\u001b[38;5;241m100\u001b[39m))\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'match'"
     ]
    }
   ],
   "source": [
    "from match import log, log10,exp\n",
    "print(\"natural log:\",log(e))\n",
    "print(\"log base 10 of 100:\",log10(100))\n",
    "print(\"e to the power 2:\",exp(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "eb8d669b-c768-4764-98a4-6a3bde436406",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'match'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[37], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmatch\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m log, log10,exp\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnatural log:\u001b[39m\u001b[38;5;124m\"\u001b[39m, log(e))\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlog base 10 of 100:\u001b[39m\u001b[38;5;124m\"\u001b[39m,log10(\u001b[38;5;241m100\u001b[39m))\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'match'"
     ]
    }
   ],
   "source": [
    "from match import log, log10,exp\n",
    "print(\"natural log:\", log(e))\n",
    "print(\"log base 10 of 100:\",log10(100))\n",
    "print(\"e to the power 2:\",exp(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "5ce4f066-84c1-4fb9-af47-2452e0ab7c07",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'match'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[39], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmatch\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m log, log10, exp\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnatural log:\u001b[39m\u001b[38;5;124m\"\u001b[39m, log(e))\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlog base 10 of 100:\u001b[39m\u001b[38;5;124m\"\u001b[39m,log10(\u001b[38;5;241m100\u001b[39m))\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'match'"
     ]
    }
   ],
   "source": [
    "from match import log, log10, exp\n",
    "print(\"natural log:\", log(e))\n",
    "print(\"log base 10 of 100:\",log10(100))\n",
    "print(\"e to the power 2:\",exp(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9330abe6-a879-4673-a673-1d0a76c03315",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'e' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[41], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmath\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m log, log10, exp\n\u001b[1;32m----> 2\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnatural log:\u001b[39m\u001b[38;5;124m\"\u001b[39m, log(e))\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlog base 10 of 100:\u001b[39m\u001b[38;5;124m\"\u001b[39m,log10(\u001b[38;5;241m100\u001b[39m))\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124me to the power 2:\u001b[39m\u001b[38;5;124m\"\u001b[39m,exp(\u001b[38;5;241m2\u001b[39m))\n",
      "\u001b[1;31mNameError\u001b[0m: name 'e' is not defined"
     ]
    }
   ],
   "source": [
    "from math import log, log10, exp\n",
    "print(\"natural log:\", log(e))\n",
    "print(\"log base 10 of 100:\",log10(100))\n",
    "print(\"e to the power 2:\",exp(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "9f6418d5-4202-410d-808f-652d59b8f7cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "natural log: 1.0\n",
      "log base 10 of 100: 2.0\n",
      "e to the power 2: 7.38905609893065\n"
     ]
    }
   ],
   "source": [
    "from math import log, log10, exp,e\n",
    "print(\"natural log:\", log(e))\n",
    "print(\"log base 10 of 100:\",log10(100))\n",
    "print(\"e to the power 2:\",exp(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "5e0fb201-b28a-4510-a4d2-3524c28d642b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "current time: 2025-05-09 11:18:08.029423\n",
      "date:  2025-05-09\n",
      "time:  11:18:08.029423\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "now= datetime.now()\n",
    "print(\"current time:\",now)\n",
    "print(\"date: \", now.date())\n",
    "print(\"time: \", now.time())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "04a58546-1657-44d2-92f2-2f3f9b6f80ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Is leap year True\n"
     ]
    }
   ],
   "source": [
    "import calendar\n",
    "year= 2024\n",
    "print(\"Is leap year\", calendar.isleap(year))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "cddc79ed-01c3-419e-8a6c-3e47e53ab16b",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'canlendar' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[49], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mcalendar\u001b[39;00m\n\u001b[0;32m      2\u001b[0m year\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m2025\u001b[39m\n\u001b[1;32m----> 3\u001b[0m \u001b[38;5;28mprint\u001b[39m(calendar(canlendar(year)))\n",
      "\u001b[1;31mNameError\u001b[0m: name 'canlendar' is not defined"
     ]
    }
   ],
   "source": [
    "import calendar\n",
    "year=2025\n",
    "print(calendar(canlendar(year)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ca2ee622-55b5-4dc8-bbbc-ae3315b9fe95",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unmatched ')' (3562887553.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[51], line 3\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(calendar.calendar(year)))\u001b[0m\n\u001b[1;37m                                  ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unmatched ')'\n"
     ]
    }
   ],
   "source": [
    "import calendar\n",
    "year=2025\n",
    "print(calendar.calendar(year)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "699844f1-830e-4e44-9a54-07ae4d25bffb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                  2025\n",
      "\n",
      "      January                   February                   March\n",
      "Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su\n",
      "       1  2  3  4  5                      1  2                      1  2\n",
      " 6  7  8  9 10 11 12       3  4  5  6  7  8  9       3  4  5  6  7  8  9\n",
      "13 14 15 16 17 18 19      10 11 12 13 14 15 16      10 11 12 13 14 15 16\n",
      "20 21 22 23 24 25 26      17 18 19 20 21 22 23      17 18 19 20 21 22 23\n",
      "27 28 29 30 31            24 25 26 27 28            24 25 26 27 28 29 30\n",
      "                                                    31\n",
      "\n",
      "       April                      May                       June\n",
      "Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su\n",
      "    1  2  3  4  5  6                1  2  3  4                         1\n",
      " 7  8  9 10 11 12 13       5  6  7  8  9 10 11       2  3  4  5  6  7  8\n",
      "14 15 16 17 18 19 20      12 13 14 15 16 17 18       9 10 11 12 13 14 15\n",
      "21 22 23 24 25 26 27      19 20 21 22 23 24 25      16 17 18 19 20 21 22\n",
      "28 29 30                  26 27 28 29 30 31         23 24 25 26 27 28 29\n",
      "                                                    30\n",
      "\n",
      "        July                     August                  September\n",
      "Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su\n",
      "    1  2  3  4  5  6                   1  2  3       1  2  3  4  5  6  7\n",
      " 7  8  9 10 11 12 13       4  5  6  7  8  9 10       8  9 10 11 12 13 14\n",
      "14 15 16 17 18 19 20      11 12 13 14 15 16 17      15 16 17 18 19 20 21\n",
      "21 22 23 24 25 26 27      18 19 20 21 22 23 24      22 23 24 25 26 27 28\n",
      "28 29 30 31               25 26 27 28 29 30 31      29 30\n",
      "\n",
      "      October                   November                  December\n",
      "Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su\n",
      "       1  2  3  4  5                      1  2       1  2  3  4  5  6  7\n",
      " 6  7  8  9 10 11 12       3  4  5  6  7  8  9       8  9 10 11 12 13 14\n",
      "13 14 15 16 17 18 19      10 11 12 13 14 15 16      15 16 17 18 19 20 21\n",
      "20 21 22 23 24 25 26      17 18 19 20 21 22 23      22 23 24 25 26 27 28\n",
      "27 28 29 30 31            24 25 26 27 28 29 30      29 30 31\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import calendar\n",
    "year=2025\n",
    "print(calendar.calendar(year))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "546f158d-61f2-4b96-ae07-7eacaec57b76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25 "
     ]
    }
   ],
   "source": [
    "import calendar\n",
    "leaps= calendar.leapdays(1925, 2025)\n",
    "print(leaps, end=' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e7fd4981-109b-4141-917a-707ee7435976",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "today: Friday\n"
     ]
    }
   ],
   "source": [
    "from datetime import date\n",
    "today=date.today()\n",
    "name=today.strftime(\"%A\")\n",
    "print(\"today:\",name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "54556525-6b75-4968-95f4-3e20d74a6761",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "firstday: Thursday , 25-05-05/01/25\n",
      "lastday: Saturday , 25-05-31\n"
     ]
    }
   ],
   "source": [
    "import calendar \n",
    "from datetime import date\n",
    "year= 2025\n",
    "month= 5\n",
    "fday= date(year, month, 1)\n",
    "lday= date(year,month,calendar.monthrange(year, month)[1])\n",
    "print(\"firstday:\",fday.strftime(\"%A , %y-%m-%D\"))\n",
    "print(\"lastday:\",lday.strftime(\"%A , %y-%m-%d\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0371983c-25dc-4d5e-9ffc-d62e3747cc4d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a3cd54a-a1b5-4494-8aff-89f7c9a4c406",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
